Docker与传统虚拟机的对比：
1.docker启动更快，达到秒级，甚至毫秒级
2.硬盘使用更少
3.性能更好，docker接近原生
4.系统支持量更多，docker单机支持上千个容器
Docker基本概念：镜像，容器，仓库
docker中安装vim：apt-get update-->apt-get install -y vim
1.Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。在docker中，镜像并非是一个打包文件，而是由一组文件系统联合组成。在镜像构建时，会一层层构建，后一层值改动自己这一层，不会改变前面的层。
2.容器是镜像运行的实体，就像类和实例一样。容器的实质是进程，但与直接在宿主执行的进程不同，容器有自己的命名空间，容器可以有自己的root，网络配置等，容器内的进程运行在一个独立的空间中。每一个容器运行时，以镜像为基础层，在其上创建一个当前容器的存储层，所有的文件读写都应在数据卷中，对宿主发生读写，容器消亡时，存储层会消失，数据卷不会消失。
3.使用docker registry来集中存储，分发镜像，一个docker registry中包含多个仓库，每个仓库对应多个标签，每个标签对应一个镜像。通常用<仓库名>:<标签>来指定版本镜像，不给出标签默认为lastest。
获取镜像(终端中)：
	docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
	比如：docker pull ubuntu:16.04
运行docker中的镜像:docker run -it --rm ubuntu:16.04 bash
查看当前系统信息:cat /etc/os-release
		  退出:exit
列出镜像:docker image ls
镜像体积：docker system df
由于docker镜像是多层存储结构，可以继承，复用，因此不同镜像可能使用相同的基础镜像，从而拥有共同的层。
显示虚悬镜像：docker image ls -f dangling=true
删除虚悬镜像:docker image prune
虚悬镜像的产生是由于镜像的维护，发布了新版本的镜像导致旧版的名称被取消，这类镜像通常消失了存在的意义
中间层镜像：为了加速镜像构建，重复利用资源，docker会利用中间层镜像。
显示包括中间层在内的所有镜像：docker image ls -a
列出部分镜像：docker image ls只会列出顶级镜像，想要查看部分镜像可以携带参数
		docker image ls ubuntu：会列出Ubuntu的所有镜像
		docker image ls ubuntu:16.04指定Ubuntu版本号
		docker image ls -f since=ubuntu:14.04过滤器
列出所有镜像的ID：docker image ls -q
可以指定特定的格式查看:
docker image ls --format"{{.ID}}：{{.Repository}}"表示只显示镜像ID和仓库名
删除本地镜像:docker image rm [选项]<镜像1>[<镜像2>...]
		删除一般可以使用3位以上且能分辨的短ID或者仓库：标签组合或者digests来删除
镜像的唯一标示是其ID和摘要，而一个镜像有多个标签，在删除时，首先就是将该镜像的标签都取消，也就是看到的Untagged信息，而在删除所指定的标签后，如果还有别的标签指向这个镜像，Delete行为就不会发生，并非所有的rm都会产生删除镜像的行为，有可能只是取消了标签。删除是从上往下层删除的一个过程，当某一层还有依赖时，就不会触发删除行为。
定制一个web服务器：docker run --name webserver -d -p 80:80 nginx
修改web页面内容:docker exec -it webserver bash--> 
echo '<h1>Hello,Mr Tang!</h1>' > /usr/share/nginx/html/index.html
查看容器存储层具体的改动:docker diff webserver
我们在运行一个容器的时候，任何文件修改都会被保存再存储层，docker commit [选项]<容器ID或容器名>[<仓库1>[:<标签>]]可以将容器保存为镜像
使用Dockerfile来将每一层的修改，安装，构建，操作命令都写入脚本，用这个脚本来构建定制镜像，就可以解决之前的无法重复问题，镜像构建透明性的问题，体积问题。
定制镜像：定制镜像就是以一个镜像为基础，在其基础之上进行定制，必须制定基础镜像，用FRO
		M引入，且必须写在第一排，docker中存在一个空白镜像，用scratch标示，以此作为基础镜像体积会更小
RUN执行命令：格式：RUN [“可执行文件”，“参数1”，“参数2”]
构建镜像：docker build [选项] <上下文路径>   例：docker build -t 
		nginx:v3 .(在Dockerfile目录下，其中.表示当前目录)
docker运行时分为docker引擎和docker客户端，用户在客户端上执行的操作都是通过远程调用的形式在服务端完成。在构建镜像的时候，docker会将路径下的内容打包，然后上传给docker引擎。构建的时候是将目录下所有文件打包，如果不指定额外的Dockerfile时，默认为Dockerfile,如果希望忽略某一些文件可以写一个类似.gitignore的.dockerignore(-f可以指定上下文目录和文件名)